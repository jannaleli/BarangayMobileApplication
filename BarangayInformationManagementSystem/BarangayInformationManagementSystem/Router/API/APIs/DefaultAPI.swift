//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**

     - parameter attachmentId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attachmentAttachmentIdGet(attachmentId: String, completion: @escaping ((_ data: BarangayAttachmentModel?,_ error: Error?) -> Void)) {
        attachmentAttachmentIdGetWithRequestBuilder(attachmentId: attachmentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /attachment/{attachment_id}
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example={
  "attachment_src" : "attachment_src",
  "attachment_id" : "attachment_id"
}}]
     
     - parameter attachmentId: (path)  

     - returns: RequestBuilder<BarangayAttachmentModel> 
     */
    open class func attachmentAttachmentIdGetWithRequestBuilder(attachmentId: String) -> RequestBuilder<BarangayAttachmentModel> {
        var path = "/attachment/{attachment_id}"
        let attachmentIdPreEscape = "\(attachmentId)"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_id}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayAttachmentModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attachmentAttachmentIdOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        attachmentAttachmentIdOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /attachment/{attachment_id}
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func attachmentAttachmentIdOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/attachment/{attachment_id}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attachmentOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        attachmentOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /attachment
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func attachmentOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/attachment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter barangayAttachmentModel: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attachmentPost(barangayAttachmentModel: BarangayAttachmentModel, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        attachmentPostWithRequestBuilder(barangayAttachmentModel: barangayAttachmentModel).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /attachment
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     
     - parameter barangayAttachmentModel: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func attachmentPostWithRequestBuilder(barangayAttachmentModel: BarangayAttachmentModel) -> RequestBuilder<Void> {
        let path = "/attachment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: barangayAttachmentModel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter complaintId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func complaintComplaintIdGet(complaintId: String, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        complaintComplaintIdGetWithRequestBuilder(complaintId: complaintId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /complaint/{complaint_id}
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter complaintId: (path)  

     - returns: RequestBuilder<Empty> 
     */
    open class func complaintComplaintIdGetWithRequestBuilder(complaintId: String) -> RequestBuilder<Empty> {
        var path = "/complaint/{complaint_id}"
        let complaintIdPreEscape = "\(complaintId)"
        let complaintIdPostEscape = complaintIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{complaint_id}", with: complaintIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func complaintComplaintIdOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        complaintComplaintIdOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /complaint/{complaint_id}
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func complaintComplaintIdOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/complaint/{complaint_id}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func complaintGet(completion: @escaping ((_ data: BarangayComplaintArray?,_ error: Error?) -> Void)) {
        complaintGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /complaint
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<BarangayComplaintArray> 
     */
    open class func complaintGetWithRequestBuilder() -> RequestBuilder<BarangayComplaintArray> {
        let path = "/complaint"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayComplaintArray>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func complaintOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        complaintOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /complaint
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func complaintOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/complaint"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter barangayComplaintModel: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func complaintPost(barangayComplaintModel: BarangayComplaintModel, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        complaintPostWithRequestBuilder(barangayComplaintModel: barangayComplaintModel).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /complaint
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     
     - parameter barangayComplaintModel: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func complaintPostWithRequestBuilder(barangayComplaintModel: BarangayComplaintModel) -> RequestBuilder<Void> {
        let path = "/complaint"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: barangayComplaintModel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func documentGet(completion: @escaping ((_ data: BarangayDocumentArray?,_ error: Error?) -> Void)) {
        documentGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /document
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<BarangayDocumentArray> 
     */
    open class func documentGetWithRequestBuilder() -> RequestBuilder<BarangayDocumentArray> {
        let path = "/document"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayDocumentArray>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func documentOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        documentOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /document
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func documentOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/document"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter barangayDocumentModel: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func documentPost(barangayDocumentModel: BarangayDocumentModel, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        documentPostWithRequestBuilder(barangayDocumentModel: barangayDocumentModel).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /document
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     
     - parameter barangayDocumentModel: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func documentPostWithRequestBuilder(barangayDocumentModel: BarangayDocumentModel) -> RequestBuilder<Void> {
        let path = "/document"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: barangayDocumentModel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func documentPut(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        documentPutWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /document
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func documentPutWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/document"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func documentUsernameGet(username: String, completion: @escaping ((_ data: BarangayDocumentArray?,_ error: Error?) -> Void)) {
        documentUsernameGetWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /document/{username}
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example=""}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<BarangayDocumentArray> 
     */
    open class func documentUsernameGetWithRequestBuilder(username: String) -> RequestBuilder<BarangayDocumentArray> {
        var path = "/document/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayDocumentArray>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func documentUsernameOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        documentUsernameOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /document/{username}
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func documentUsernameOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/document/{username}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventGet(completion: @escaping ((_ data: BarangayEventArray?,_ error: Error?) -> Void)) {
        eventGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /event
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<BarangayEventArray> 
     */
    open class func eventGetWithRequestBuilder() -> RequestBuilder<BarangayEventArray> {
        let path = "/event"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayEventArray>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        eventOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /event
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func eventOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/event"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter barangayEventModel: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventPost(barangayEventModel: BarangayEventModel, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        eventPostWithRequestBuilder(barangayEventModel: barangayEventModel).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /event
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     
     - parameter barangayEventModel: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func eventPostWithRequestBuilder(barangayEventModel: BarangayEventModel) -> RequestBuilder<Void> {
        let path = "/event"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: barangayEventModel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permitGet(completion: @escaping ((_ data: BarangayPermitArray?,_ error: Error?) -> Void)) {
        permitGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /permit
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<BarangayPermitArray> 
     */
    open class func permitGetWithRequestBuilder() -> RequestBuilder<BarangayPermitArray> {
        let path = "/permit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayPermitArray>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permitOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        permitOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /permit
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func permitOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/permit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permitPost(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        permitPostWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /permit
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func permitPostWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/permit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permitPut(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        permitPutWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /permit
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func permitPutWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/permit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permitUsernameGet(username: String, completion: @escaping ((_ data: BarangayPermitArray?,_ error: Error?) -> Void)) {
        permitUsernameGetWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /permit/{username}
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example=""}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<BarangayPermitArray> 
     */
    open class func permitUsernameGetWithRequestBuilder(username: String) -> RequestBuilder<BarangayPermitArray> {
        var path = "/permit/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayPermitArray>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permitUsernameOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        permitUsernameOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /permit/{username}
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func permitUsernameOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/permit/{username}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGet(completion: @escaping ((_ data: BarangayUserArray?,_ error: Error?) -> Void)) {
        userGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<BarangayUserArray> 
     */
    open class func userGetWithRequestBuilder() -> RequestBuilder<BarangayUserArray> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayUserArray>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        userOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /user
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func userOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter barangayUserModel: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userPost(barangayUserModel: BarangayUserModel, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        userPostWithRequestBuilder(barangayUserModel: barangayUserModel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /user
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter barangayUserModel: (body)  

     - returns: RequestBuilder<Empty> 
     */
    open class func userPostWithRequestBuilder(barangayUserModel: BarangayUserModel) -> RequestBuilder<Empty> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: barangayUserModel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userUserIdGet(userId: String, completion: @escaping ((_ data: BarangayUserModel?,_ error: Error?) -> Void)) {
        userUserIdGetWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/{user_id}
     - responseHeaders: [Access-Control-Allow-Origin(String)]
     - examples: [{contentType=application/json, example={
  "profession" : "profession",
  "firstname" : "firstname",
  "address" : "address",
  "mobilenumber" : "mobilenumber",
  "gross_income" : "gross_income",
  "gender" : "gender",
  "createdate" : "createdate",
  "weight" : "weight",
  "tin_no" : "tin_no",
  "birtdate" : "birtdate",
  "ctc_no" : "ctc_no",
  "lastname" : "lastname",
  "zipcode" : "zipcode",
  "place_of_birth" : "place_of_birth",
  "password" : "password",
  "user_id" : "user_id",
  "civil_status" : "civil_status",
  "contact_no" : "contact_no",
  "attachment_id" : "attachment_id",
  "control_no" : "control_no",
  "username" : "username",
  "height" : "height"
}}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<BarangayUserModel> 
     */
    open class func userUserIdGetWithRequestBuilder(userId: String) -> RequestBuilder<BarangayUserModel> {
        var path = "/user/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BarangayUserModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userUserIdOptions(completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        userUserIdOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - OPTIONS /user/{user_id}
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    open class func userUserIdOptionsWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/user/{user_id}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
